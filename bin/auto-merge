#! /usr/bin/php
<?php

error_reporting(E_ALL);

# this is magic so we don't have includes
$base_dir = dirname(dirname(__file__));
define('BASE_DIR', $base_dir);

include BASE_DIR."/libs/classes/AutoLoader.class.php";

$libs = array(
    BASE_DIR.'/libs',
    BASE_DIR.'/libs/classes'
);

define('DOCS_DIR', BASE_DIR."/docs");

$autoloader = new AutoLoader();
$autoloader->registerLibraries($libs);

#some magic for options

$valid_options = array (
    'f' => "file:",
    'n' => "no-push"
);

$options = new GetOpts($valid_options, $argv);

if (($invalid = $options->check_args(array('file')))!== true)
{
    echo 'arguments required: '.join(" ",$invalid)."\n\n";
    die();
}

# end of magic ;)

# just a object I wrote to help with this task
$git_repos = new Git();

$files = $options->query('file');

foreach ($files as $file)
{
    # just return json data gross @todo refactor
    try
    {
        $repos = load_from_json($file);
    }
    catch(Exception $e)
    {
        try
        {
            $repos = load_from_json(BASE_DIR."/json/".$file);
        }
        catch(Exception $e)
        {
            try
            {
                $repos = load_from_json(BASE_DIR."/json/".$file.".json");
            }
            catch(Exception $e)
            {
                echo "could not find file in\n".getcwd()."\n".BASE_DIR."/json\n";
            }
        }
    }

    chdir(BASE_DIR."/tmp");

    #clone all my repos
    foreach ($repos as $repo => $info)
    {
        if (!isset($info['remote_branch']))
        {
            $info['remote_branch'] = $info['repo_branch'];
        }

        $git_repos->add_repo($repo)
                  ->select_repo($repo);

        if (!file_exists(BASE_DIR."/tmp/".$repo))
        {
            $git_repos->clone_repo($info['repo_url']);
        }

        try
        {
            $git_repos->remote_add($info['repo_name'], $info['repo_url'])
                      ->remote_add($info['remote_name'], $info['remote_url']);
        } 
        catch(Exception $e)
        {
            echo "NOTICE: Remote already exists\n";
        }

        try
        {
            $git_repos->branch($info['repo_branch']);
        }
        catch(Exception $e)
        {
            echo "NOTICE: Branch already exists\n";
        }

        $git_repos->checkout_branch($info['repo_branch'])
                  ->pull($info['remote_name'], $info['remote_branch'], array("--rebase"));

        if (!$options->is_defined('no-push')) 
        {
            $git_repos->push($info['repo_name'], $info['remote_branch'], array("-f"));
        }
    }

    chdir(BASE_DIR);
}




# a helper function for loading a json file
function load_from_json($location)
{
    if (!file_exists($location)) throw new Exception("file not found");
    $json = file_get_contents($location); 
    $temp = json_decode($json, true);
    if (!is_array($temp)) throw new Exception("invalid json file");
    return $temp;
}
